// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockModifyController is a mock of ModifyController interface.
type MockModifyController struct {
	ctrl     *gomock.Controller
	recorder *MockModifyControllerMockRecorder
}

// MockModifyControllerMockRecorder is the mock recorder for MockModifyController.
type MockModifyControllerMockRecorder struct {
	mock *MockModifyController
}

// NewMockModifyController creates a new mock instance.
func NewMockModifyController(ctrl *gomock.Controller) *MockModifyController {
	mock := &MockModifyController{ctrl: ctrl}
	mock.recorder = &MockModifyControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModifyController) EXPECT() *MockModifyControllerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockModifyController) Run(arg0 int, arg1 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0, arg1)
}

// Run indicates an expected call of Run.
func (mr *MockModifyControllerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockModifyController)(nil).Run), arg0, arg1)
}
